#Components
- Funções que retornam html
- Usa quando algo se repete muiuto ou quando um arquivo principal dica muito extenso.

#Propriedades
- Atributos que posso passar na hora de chamar o Componente
- interface ButtonProps extends ComponentProps<"button"> {}
    > O component recebe todas as propriedades que um elemento button tem


#Tailwind
- Possibilita fazer estilizações utilizando classes utilitárias
- Permite criar classes personalizadas para estilizar elementos
- Theme first: há uma padronização, você define o tema e reutiliza, sempre seguindo a padronização
- Por padrão remove toda a estilização base dos elementos html
- --color-*: initial
    > Faz com que as outras cores do Tailwind sumam, só fica disponível o que está dentro do theme criado no globals.css 
- --font-sans:
    > é a font padrão que será usada na aplicação
-w-full
    > faz com que o elemento tenha o tamanho máximo possível
- className = "group"
    > Permite definir o estilo com base no estado do elemento superior

#Instalações 
- npm i lucide-react
    >icones
 npm i react-hook-form
    >formulários
 npm i zod @hookform/resolvers
    >Biblioteca de validação de formulários

#Imports
- import { Montserrat, Oxanium } from 'next/font/google': O next facilita a importação de fonts do google
- import { Copy, Link } from "lucide-react";
    >


#Extensões
-PostCSS Language Support
    > Suporte ao PostCSS

#Composition partner
- O componente pode ser usado em outro componente, como uma função que pode ser chamada em outro
- Quebrar um component em vários, ex no component button


#Next.js
"use client": next.js, para quando há interação